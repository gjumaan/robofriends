{"version":3,"sources":["components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","actions.js","api/api.js","containers/App.js","serviceWorkerRegistration.js","reportWebVitals.js","reducers.js","index.js"],"names":["Header","nextProps","nextState","className","Component","Card","name","email","id","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","err","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","text","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.dfdda637.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false\n    }\n\n    render() {\n        return <h1 className='f1'>RoboFriends</h1>\n    }\n}\n\nexport default Header;","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\treturn (\n\t\t<div className='tc bg-light-green  dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user,i) => {\n\t\t\t\t\treturn ( <Card key={i} id={user.id} name={user.name} email={user.email} /> )\n\t\t\t\t})\n\t\t\t}\n    \t</div>\n\t);\n}\n\nexport default CardList","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input aria-label='Search Robots' className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange} />\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1> Oops. That is not good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { apiCall } from './api/api';\nimport { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\n\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n})\n\nexport const requestRobots = (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\n}","export const apiCall = (link) => fetch(link).then(response => response.json())","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => requestRobots(dispatch)\n\t}\n}\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { robots, searchField, onSearchChange, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn (\n\t\t\t<div className='tc'>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t{ isPending ? <h1>Loading</h1> :\n\t\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t\t}\n\t\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://cra.link/PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://cra.link/PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: true,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}