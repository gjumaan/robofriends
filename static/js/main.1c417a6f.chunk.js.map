{"version":3,"sources":["components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Header","nextProps","nextState","className","Component","Card","name","email","id","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c417a6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false\n    }\n\n    render() {\n        return <h1 className='f1'>RoboFriends</h1>\n    }\n}\n\nexport default Header;","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\treturn (\n\t\t<div className='tc bg-light-green  dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user,i) => {\n\t\t\t\t\treturn ( <Card key={i} id={user.id} name={user.name} email={user.email} /> )\n\t\t\t\t})\n\t\t\t}\n    \t</div>\n\t);\n}\n\nexport default CardList","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange} />\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t};\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1> Oops. That is not good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => requestRobots(dispatch)\n\t}\n}\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { robots, searchField, onSearchChange, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn (\n\t\t\t<div className='tc'>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t{ isPending ? <h1>Loading</h1> :\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t}\n\t\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\n\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n})\n\nexport const requestRobots = (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: true,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}